import java.math.BigInteger; 
public class dsaDecipher {

	public static void main(String[] args) {
		BigInteger M = new BigInteger("1");

		BigInteger p = new BigInteger("178011905478542266528237562450159990145232156369120674273274450314442865788737020770612695252123463079567156784778466449970650770920727857050009668388144034129745221171818506047231150039301079959358067395348717066319802262019714966524135060945913707594956514672855690606794135837542707371727429551343320695239");
		BigInteger q = new BigInteger("864205495604807476120572616017955259175325408501");
		BigInteger g = new BigInteger("174068207532402095185811980123523436538604490794561350978495831040599953488455823147851597408940950725307797094915759492368300574252438761037084473467180148876118103083043754985190983472601550494691329488083395492313850000361646482644608492304078721818959999056496097769368017749273708962006689187956744210730");
		BigInteger z1 = new BigInteger("8136993713640566448732100194823237637927843484921211421236857505592489868337");
		// BigInteger z2;
		// BigInteger z2 = new BigInteger("8136993713640566448732100194823237637927843484921211421236857505592489868337");
		
		BigInteger s = new BigInteger("134346041412585737253379036222995438496008934708");
		BigInteger r = new BigInteger("388322682993322420348113637932692327920095619953");
		BigInteger sha = new BigInteger("1050684517519");

		BigInteger key_x;

		// System.out.println(key_x.bitLength());
		// ((17 mod 3) *2) mod 3 |= (17*2) mod 3
		
		//Calculation of K  with two messages M1 1 and M2 2

/* 		BigInteger s1 = new BigInteger("134346041412585737253379036222995438496008934708");
		BigInteger s2 = new BigInteger("145907202082010638856702743518497531250928322336");
		BigInteger M1 = new BigInteger("1");
		BigInteger M2 = new BigInteger("2");




		BigInteger sd = (s1.subtract(s2)).mod(q);
		BigInteger sdInverse = sd.modInverse(q);
		BigInteger Md = (M1.subtract(M2)).mod(q);
	
		BigInteger k = (Md.multiply(sdInverse)).mod(q);

		BigInteger ks = k.multiply(s1);
		BigInteger ksMinusM = ks.subtract(M1);
		BigInteger rInverse = r.modInverse(q);
		BigInteger key_x = (rInverse.multiply(ksMinusM)).mod(q);
		
		System.out.println(nInverse); */
		

	

	
	}

	
}
